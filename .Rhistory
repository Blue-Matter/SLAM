Effort <- Pop$Effort[years]
Effort
mean(Effort)
# Quick test
CAL <- Pop$CAL_samp[,years]
CAL_ESS <- rep(100, nts)
Effort <- Pop$Effort[years]/mean(Pop$Effort[years])
Effort_SD <- rep(0.1, nts)
EffExists <- rep(1, nts)
nEffMonths <- nts
CPUE <- Pop$Index[years]/mean(Pop$Index[years])
CPUE_SD <- rep(0.2, nts)
sigmaRprior <- c(0.5, 0.2)
F_meanprior <- c(0.4, 0.3)
Fit_Effort <- 1
Fit_CPUE <- 1
data <- list(model='SLAM',
Len_Age=Pop$Len_at_Age,
SD_Len_Age=Pop$SD_Len_at_Age,
Wght_Age=Pop$Wt_at_Age,
Mat_at_Age=Pop$Mat_at_Age,
M_at_Age=Pop$M_at_Age,
PSM_at_Age=Pop$phi_at_Age,
LenBins=Pop$Len_Bins,
LenMids=Pop$Len_Mids,
CAL=CAL,
CAL_ESS=CAL_ESS,
Effort=Effort,
Effort_SD=Effort_SD,
EffExists=EffExists,
nEffMonths=nEffMonths,
CPUE=CPUE,
CPUE_SD=CPUE_SD,
sigmaRprior=sigmaRprior,
F_meanprior=F_meanprior,
Fit_Effort=Fit_Effort,
Fit_CPUE=Fit_CPUE)
log_sl50 <- log(Pars$SL5)
log_sldelta <- log(1)
logR0_m <- rep(log(1), 12)
logsigmaR <- log(0.2)
logF_m <- rep(log(0.3), n_months)
logRec_Devs <- rep(0, n_months)
log_sigmaF <- log(0.3)
log_sigmaR0 <- log(0.5)
parameters <- list(log_sl50=log_sl50,
log_sldelta=log_sldelta,
logR0_m=logR0_m,
log_sigmaR0=log_sigmaR0,
logsigmaR=logsigmaR,
logF_m=logF_m,
log_sigmaF=log_sigmaF,
logRec_Devs=logRec_Devs)
Random <- 'logRec_Devs'
obj <- TMB::MakeADFun(data=data, parameters=parameters, DLL="SLAM_TMBExports",
silent=TRUE, hessian=FALSE, random=Random)
log_sl50 <- log(Pars$SL5)
log_sldelta <- log(1)
logR0_m <- rep(log(1), 12)
logsigmaR <- log(0.2)
logF_m <- rep(log(0.3), nts)
logRec_Devs <- rep(0, nts)
log_sigmaF <- log(0.3)
log_sigmaR0 <- log(0.5)
parameters <- list(log_sl50=log_sl50,
log_sldelta=log_sldelta,
logR0_m=logR0_m,
log_sigmaR0=log_sigmaR0,
logsigmaR=logsigmaR,
logF_m=logF_m,
log_sigmaF=log_sigmaF,
logRec_Devs=logRec_Devs)
Random <- 'logRec_Devs'
obj <- TMB::MakeADFun(data=data, parameters=parameters, DLL="SLAM_TMBExports",
silent=TRUE, hessian=FALSE, random=Random)
obj$fn
obj$fn()
data
opt <- suppressWarnings(nlminb(starts, obj$fn, obj$gr))
starts <- obj$par
opt <- suppressWarnings(nlminb(starts, obj$fn, obj$gr))
log(Pars$SL5)
data
nts
Pop <- Simulate(Pars)
nyears <- dim(Pop$CAL_samp)[2]
use_years <- 10 # use the last use_years
years <- (nyears-use_years*12+1):nyears
nts <- length(years)
# Quick test
CAL <- Pop$CAL_samp[,years]
CAL_ESS <- rep(100, nts)
Effort <- Pop$Effort[years]/mean(Pop$Effort[years])
Effort_SD <- rep(0.1, nts)
EffExists <- rep(1, nts)
nEffMonths <- nts
CPUE <- Pop$Index[years]/mean(Pop$Index[years])
CPUE_SD <- rep(0.2, nts)
sigmaRprior <- c(0.5, 0.2)
F_meanprior <- c(0.4, 0.3)
Fit_Effort <- 1
Fit_CPUE <- 1
data <- list(model='SLAM',
Len_Age=Pop$Len_at_Age,
SD_Len_Age=Pop$SD_Len_at_Age,
Wght_Age=Pop$Wt_at_Age,
Mat_at_Age=Pop$Mat_at_Age,
M_at_Age=Pop$M_at_Age,
PSM_at_Age=Pop$phi_at_Age,
LenBins=Pop$Len_Bins,
LenMids=Pop$Len_Mids,
CAL=CAL,
CAL_ESS=CAL_ESS,
Effort=Effort,
Effort_SD=Effort_SD,
EffExists=EffExists,
nEffMonths=nEffMonths,
CPUE=CPUE,
CPUE_SD=CPUE_SD,
sigmaRprior=sigmaRprior,
F_meanprior=F_meanprior,
Fit_Effort=Fit_Effort,
Fit_CPUE=Fit_CPUE)
log_sl50 <- log(Pars$SL5)
log_sldelta <- log(1)
logR0_m <- rep(log(1), 12)
logsigmaR <- log(0.2)
logF_m <- rep(log(0.3), nts)
logRec_Devs <- rep(0, nts)
log_sigmaF <- log(0.3)
log_sigmaR0 <- log(0.5)
parameters <- list(log_sl50=log_sl50,
log_sldelta=log_sldelta,
logR0_m=logR0_m,
log_sigmaR0=log_sigmaR0,
logsigmaR=logsigmaR,
logF_m=logF_m,
log_sigmaF=log_sigmaF,
logRec_Devs=logRec_Devs)
Random <- 'logRec_Devs'
obj <- TMB::MakeADFun(data=data, parameters=parameters, DLL="SLAM_TMBExports",
silent=TRUE, hessian=FALSE, random=Random)
obj$fn()
starts <- obj$par
opt <- suppressWarnings(nlminb(starts, obj$fn, obj$gr))
rep <- obj$report()
rep$sigmaR
rep$sigmaR0
rep$sigmaF
source("~/GitHub/SLAM/R/PopDynamics.R")
Pars <- Load_Scenario(1)
Pop <- Simulate(Pars)
nyears <- dim(Pop$CAL_samp)[2]
use_years <- 10 # use the last use_years
years <- (nyears-use_years*12+1):nyears
nts <- length(years)
# Quick test
CAL <- Pop$CAL_samp[,years]
CAL_ESS <- rep(100, nts)
Effort <- Pop$Effort[years]/mean(Pop$Effort[years])
Effort_SD <- rep(0.1, nts)
EffExists <- rep(1, nts)
nEffMonths <- nts
CPUE <- Pop$Index[years]/mean(Pop$Index[years])
CPUE_SD <- rep(0.2, nts)
sigmaRprior <- c(0.5, 0.2)
F_meanprior <- c(0.4, 0.3)
Fit_Effort <- 1
Fit_CPUE <- 1
data <- list(model='SLAM',
Len_Age=Pop$Len_at_Age,
SD_Len_Age=Pop$SD_Len_at_Age,
Wght_Age=Pop$Wt_at_Age,
Mat_at_Age=Pop$Mat_at_Age,
M_at_Age=Pop$M_at_Age,
PSM_at_Age=Pop$phi_at_Age,
LenBins=Pop$Len_Bins,
LenMids=Pop$Len_Mids,
CAL=CAL,
CAL_ESS=CAL_ESS,
Effort=Effort,
Effort_SD=Effort_SD,
EffExists=EffExists,
nEffMonths=nEffMonths,
CPUE=CPUE,
CPUE_SD=CPUE_SD,
sigmaRprior=sigmaRprior,
F_meanprior=F_meanprior,
Fit_Effort=Fit_Effort,
Fit_CPUE=Fit_CPUE)
log_sl50 <- log(Pars$SL5)
log_sldelta <- log(1)
logR0_m <- rep(log(1), 12)
logsigmaR <- log(0.2)
logF_m <- rep(log(0.3), nts)
logRec_Devs <- rep(0, nts)
log_sigmaF <- log(0.3)
log_sigmaR0 <- log(0.5)
parameters <- list(log_sl50=log_sl50,
log_sldelta=log_sldelta,
logR0_m=logR0_m,
log_sigmaR0=log_sigmaR0,
logsigmaR=logsigmaR,
logF_m=logF_m,
log_sigmaF=log_sigmaF,
logRec_Devs=logRec_Devs)
Random <- 'logRec_Devs'
obj <- TMB::MakeADFun(data=data, parameters=parameters, DLL="SLAM_TMBExports",
silent=TRUE, hessian=FALSE, random=Random)
starts <- obj$par
opt <- suppressWarnings(nlminb(starts, obj$fn, obj$gr))
rep <- obj$report()
plot(Pop$Rec_Pattern,type='l', ylim=c(0, max(Pop$Rec_Pattern)))
lines(rep$R0_m, col='blue')
sum(Pop$Rec_Pattern)
sum(rep$R0_m)
library(SLAM)
library(SLAM)
Pars <- Load_Scenario(1)
Pop <- Simulate(Pars)
nyears <- dim(Pop$CAL_samp)[2]
use_years <- 10 # use the last use_years
years <- (nyears-use_years*12+1):nyears
nts <- length(years)
# Quick test
CAL <- Pop$CAL_samp[,years]
CAL_ESS <- rep(100, nts)
Effort <- Pop$Effort[years]/mean(Pop$Effort[years])
Effort_SD <- rep(0.1, nts)
EffExists <- rep(1, nts)
nEffMonths <- nts
CPUE <- Pop$Index[years]/mean(Pop$Index[years])
CPUE_SD <- rep(0.2, nts)
sigmaRprior <- c(0.5, 0.2)
F_meanprior <- c(0.4, 0.3)
Fit_Effort <- 1
Fit_CPUE <- 1
data <- list(model='SLAM',
Len_Age=Pop$Len_at_Age,
SD_Len_Age=Pop$SD_Len_at_Age,
Wght_Age=Pop$Wt_at_Age,
Mat_at_Age=Pop$Mat_at_Age,
M_at_Age=Pop$M_at_Age,
PSM_at_Age=Pop$phi_at_Age,
LenBins=Pop$Len_Bins,
LenMids=Pop$Len_Mids,
CAL=CAL,
CAL_ESS=CAL_ESS,
Effort=Effort,
Effort_SD=Effort_SD,
EffExists=EffExists,
nEffMonths=nEffMonths,
CPUE=CPUE,
CPUE_SD=CPUE_SD,
sigmaRprior=sigmaRprior,
F_meanprior=F_meanprior,
Fit_Effort=Fit_Effort,
Fit_CPUE=Fit_CPUE)
log_sl50 <- log(Pars$SL5)
log_sldelta <- log(1)
logR0_m <- rep(log(1), 12)
logsigmaR <- log(0.2)
logF_m <- rep(log(0.3), nts)
logRec_Devs <- rep(0, nts)
log_sigmaF <- log(0.3)
log_sigmaR0 <- log(0.5)
parameters <- list(log_sl50=log_sl50,
log_sldelta=log_sldelta,
logR0_m=logR0_m,
log_sigmaR0=log_sigmaR0,
logsigmaR=logsigmaR,
logF_m=logF_m,
log_sigmaF=log_sigmaF,
logRec_Devs=logRec_Devs)
Random <- 'logRec_Devs'
obj <- TMB::MakeADFun(data=data, parameters=parameters, DLL="SLAM_TMBExports",
silent=TRUE, hessian=FALSE, random=Random)
starts <- obj$par
opt <- suppressWarnings(nlminb(starts, obj$fn, obj$gr))
rep <- obj$report()
plot(Pop$Rec_Pattern,type='l', ylim=c(0, max(Pop$Rec_Pattern)))
lines(rep$R0_m, col='blue')
Ages <- 0:Pars$maxage
nAge <- length(Ages)
LatAge <- Pars$Linf*(1-exp(-Pars$K*(Ages-Pars$t0)))
LatAge[LatAge==0] <- 0.001
LenSD <- LatAge * Pars$LenCV
WatAge <- Pars$wa*LatAge^Pars$wb
# Probability of length-at-age
Len_Bins <- seq(0, to=Pars$BinMax, by=Pars$BinWidth)
nbins <- length(Len_Bins)-1
By <- Len_Bins[2]-Len_Bins[1]
Len_Mids <- seq(Len_Bins[1]+0.5*By, by=By, length.out=nbins)
ALK <- matrix(0, nrow=nAge, ncol=nbins)
ALK[,1] <- pnorm((Len_Bins[2] - LatAge)/LenSD, 0, 1) # probability of length-at-age
for (i in 2:(nbins-1)) {
ALK[,i] <- pnorm((Len_Bins[i+1] - LatAge)/LenSD, 0, 1) -
pnorm((Len_Bins[i] - LatAge)/LenSD, 0, 1)
}
ALK[,nbins] <- 1 - pnorm((Len_Bins[nbins] - LatAge)/LenSD, 0, 1)
# Maturity
pL <- 1/(1+exp(-log(19)*((Len_Mids-Pars$L50)/(Pars$L95-Pars$L50))))
pA <- apply(ALK%*%pL, 1, sum)
# Selectivity - double-normal
sL <- calSelL(Len_Mids, Pars$SL5, Pars$SFS, Pars$Vmaxlen, Pars$Linf)
sA <- apply(ALK%*%sL, 1, sum)
# Set up arrays
nTS <- Pars$nyears * 12 # total number of time-steps
N <- matrix(0, nrow=nAge, ncol=nTS)
C <- N
# Generate recruitment deviations
rec_sd <- Pars$sigmaR
rec_devs <- exp(rnorm(nTS, -0.5*rec_sd^2, rec_sd))
# monthly pattern in recruitment
rec_pattern <- GenMonthlyRec(mu=Pars$rec_mu, sigma=Pars$rec_sd)
Rbar <- Pars$Rbar # mean annual recruitment
M_at_age <- rep(Pars$M, nAge)
phi_at_age <- pA # proportion that die after spawning - assumed to follow maturity curve
# Recruitment to all years
N[1,] <- rec_pattern * rec_devs * Rbar
# Initial time-step - unfished
for (a in 2:nAge) {
N[a,1] <- N[a-1,1]*exp(-M_at_age[a-1])*(1-phi_at_age[a-1])
}
# Fishing mortality
if (is.null(Pars$Fvector)) {
# generate F vector
Fvector <- Pars$F_mu * exp(rnorm(nTS, -0.5*Pars$F_sd^2, Pars$F_sd))
} else {
Fvector <- Pars$Fvector
}
Fvector[1] <- 0
F_at_age <-  t(replicate(nAge, Fvector)) * sA
Z_at_age <- M_at_age + F_at_age
for (t in 2:nTS) {
month <- t%%12
if (month==0) month <-12
for (a in 0:Pars$maxage) {
if (a ==0)
N[a+1,t] <- rec_pattern[month]*rec_devs[t] * Rbar
if (a>0)
N[a+1, t] <- N[a,t-1]*exp(-Z_at_age[a,t-1])*(1-phi_at_age[a])
}
C[,t] <- N[,t]*((1-pA)*exp(-M_at_age/2)+pA*exp(-phi_at_age/2))*(1-exp(-F_at_age[,t]))
}
source("~/GitHub/SLAM/R/functions.R")
Ages <- 0:Pars$maxage
nAge <- length(Ages)
LatAge <- Pars$Linf*(1-exp(-Pars$K*(Ages-Pars$t0)))
LatAge[LatAge==0] <- 0.001
LenSD <- LatAge * Pars$LenCV
WatAge <- Pars$wa*LatAge^Pars$wb
# Probability of length-at-age
Len_Bins <- seq(0, to=Pars$BinMax, by=Pars$BinWidth)
nbins <- length(Len_Bins)-1
By <- Len_Bins[2]-Len_Bins[1]
Len_Mids <- seq(Len_Bins[1]+0.5*By, by=By, length.out=nbins)
ALK <- matrix(0, nrow=nAge, ncol=nbins)
ALK[,1] <- pnorm((Len_Bins[2] - LatAge)/LenSD, 0, 1) # probability of length-at-age
for (i in 2:(nbins-1)) {
ALK[,i] <- pnorm((Len_Bins[i+1] - LatAge)/LenSD, 0, 1) -
pnorm((Len_Bins[i] - LatAge)/LenSD, 0, 1)
}
ALK[,nbins] <- 1 - pnorm((Len_Bins[nbins] - LatAge)/LenSD, 0, 1)
# Maturity
pL <- 1/(1+exp(-log(19)*((Len_Mids-Pars$L50)/(Pars$L95-Pars$L50))))
pA <- apply(ALK%*%pL, 1, sum)
# Selectivity - double-normal
sL <- calSelL(Len_Mids, Pars$SL5, Pars$SFS, Pars$Vmaxlen, Pars$Linf)
sA <- apply(ALK%*%sL, 1, sum)
# Set up arrays
nTS <- Pars$nyears * 12 # total number of time-steps
N <- matrix(0, nrow=nAge, ncol=nTS)
C <- N
# Generate recruitment deviations
rec_sd <- Pars$sigmaR
rec_devs <- exp(rnorm(nTS, -0.5*rec_sd^2, rec_sd))
# monthly pattern in recruitment
rec_pattern <- GenMonthlyRec(mu=Pars$rec_mu, sigma=Pars$rec_sd)
Rbar <- Pars$Rbar # mean annual recruitment
M_at_age <- rep(Pars$M, nAge)
phi_at_age <- pA # proportion that die after spawning - assumed to follow maturity curve
# Recruitment to all years
N[1,] <- rec_pattern * rec_devs * Rbar
# Initial time-step - unfished
for (a in 2:nAge) {
N[a,1] <- N[a-1,1]*exp(-M_at_age[a-1])*(1-phi_at_age[a-1])
}
# Fishing mortality
if (is.null(Pars$Fvector)) {
# generate F vector
Fvector <- Pars$F_mu * exp(rnorm(nTS, -0.5*Pars$F_sd^2, Pars$F_sd))
} else {
Fvector <- Pars$Fvector
}
Fvector[1] <- 0
F_at_age <-  t(replicate(nAge, Fvector)) * sA
Z_at_age <- M_at_age + F_at_age
for (t in 2:nTS) {
month <- t%%12
if (month==0) month <-12
for (a in 0:Pars$maxage) {
if (a ==0)
N[a+1,t] <- rec_pattern[month]*rec_devs[t] * Rbar
if (a>0)
N[a+1, t] <- N[a,t-1]*exp(-Z_at_age[a,t-1])*(1-phi_at_age[a])
}
C[,t] <- N[,t]*((1-pA)*exp(-M_at_age/2)+pA*exp(-phi_at_age/2))*(1-exp(-F_at_age[,t]))
}
N[,1]
plot(N[,1])
plot(N[,1])
lines(N[,13], 'red')
lines(N[,25], col='blue')
plot(N[,1])
lines(N[,13], col='red')
lines(N[,25], col='blue')
Pars$sigmaR
Pars$sigmaR=0
Fvector<-rep(0,nTS)
F_at_age <-  t(replicate(nAge, Fvector)) * sA
Z_at_age <- M_at_age + F_at_age
for (t in 2:nTS) {
month <- t%%12
if (month==0) month <-12
for (a in 0:Pars$maxage) {
if (a ==0)
N[a+1,t] <- rec_pattern[month]*rec_devs[t] * Rbar
if (a>0)
N[a+1, t] <- N[a,t-1]*exp(-Z_at_age[a,t-1])*(1-phi_at_age[a])
}
C[,t] <- N[,t]*((1-pA)*exp(-M_at_age/2)+pA*exp(-phi_at_age/2))*(1-exp(-F_at_age[,t]))
}
plot(N[,1])
lines(N[,13], col='red')
lines(N[,25], col='blue')
24+1
24+12
plot(N[,1])
plot(N[,1])
lines(N[,13], col='red')
lines(N[,25], col='blue')
lines(N[,37], col='green')
seq(1, by=12, to=nTS)
plot(N[,1])
lines(N[,13], col='red')
lines(N[,25], col='blue')
lines(N[,37], col='green')
lines(N[,49], col='orange')
rec_devs
# Generate recruitment deviations
rec_sd <- Pars$sigmaR
rec_devs <- exp(rnorm(nTS, -0.5*rec_sd^2, rec_sd))
# monthly pattern in recruitment
rec_pattern <- GenMonthlyRec(mu=Pars$rec_mu, sigma=Pars$rec_sd)
rec_devs
for (t in 2:nTS) {
month <- t%%12
if (month==0) month <-12
for (a in 0:Pars$maxage) {
if (a ==0)
N[a+1,t] <- rec_pattern[month]*rec_devs[t] * Rbar
if (a>0)
N[a+1, t] <- N[a,t-1]*exp(-Z_at_age[a,t-1])*(1-phi_at_age[a])
}
C[,t] <- N[,t]*((1-pA)*exp(-M_at_age/2)+pA*exp(-phi_at_age/2))*(1-exp(-F_at_age[,t]))
}
plot(N[,1])
lines(N[,13], col='red')
lines(N[,25], col='blue')
lines(N[,37], col='green')
lines(N[,49], col='orange')
N[,1]
# Recruitment to all years
N[1,] <- rec_pattern * rec_devs * Rbar
plot(N[,1])
lines(N[,13], col='red')
lines(N[,25], col='blue')
lines(N[,37], col='green')
N <- matrix(0, nrow=nAge, ncol=nTS)
N[1,] <- rec_pattern * rec_devs * Rbar
plot(N[,1])
# Initial time-step - unfished
for (a in 2:nAge) {
N[a,1] <- N[a-1,1]*exp(-M_at_age[a-1])*(1-phi_at_age[a-1])
}
plot(N[,1])
plot(N[,1])
lines(N[,13], col='red')
lines(N[,25], col='blue')
lines(N[,37], col='green')
lines(N[,49], col='orange')
for (t in 2:nTS) {
month <- t%%12
if (month==0) month <-12
for (a in 0:Pars$maxage) {
if (a ==0)
N[a+1,t] <- rec_pattern[month]*rec_devs[t] * Rbar
if (a>0)
N[a+1, t] <- N[a,t-1]*exp(-Z_at_age[a,t-1])*(1-phi_at_age[a])
}
C[,t] <- N[,t]*((1-pA)*exp(-M_at_age/2)+pA*exp(-phi_at_age/2))*(1-exp(-F_at_age[,t]))
}
plot(N[,1])
lines(N[,13], col='red')
lines(N[,25], col='blue')
lines(N[,37], col='green')
m%%12
m=1
m%%12
36-12
library(SLAM)
